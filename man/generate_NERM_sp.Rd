% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_NERM_sp.R
\name{generate_NERM_sp}
\alias{generate_NERM_sp}
\title{Generate NERM samples}
\usage{
generate_NERM_sp(
  empirical_u,
  var_u_est,
  empirical_e,
  var_e_est,
  beta,
  X,
  cluster_means,
  id_cluster,
  start_seed = 1,
  no_sim = 10,
  return_u = FALSE
)
}
\arguments{
\item{empirical_u}{Estimated random effects}

\item{var_u_est}{Estimated variance of random effects}

\item{empirical_e}{Estimated errors}

\item{var_e_est}{Estimated errors of random effects}

\item{beta}{Vector with fixed parameters}

\item{X}{Matrix with covariates}

\item{cluster_means}{Cluster-level covariates for fixed parameters}

\item{id_cluster}{Vector with cluster labels}

\item{start_seed}{Seed to reproduce simulations}

\item{no_sim}{Number of samples}

\item{return_u}{Return random effects? Default: return_u = FALSE}
}
\value{
\item{samples}{Data frame or list with data frames with samples from NERM}
}
\description{
Function to generate data samples with outcomes from nested error regression model (NERM)
in a semiparametric way
}
\examples{

# Basic setup -------------------------------------------------------------------
set.seed(11992)
m = 25
n_j = 5
n = m * n_j
scaling_factor_e = 1
scaling_factor_u = sqrt(0.5)
x_ij = runif(n, 0, 1)
X = cbind(X0 = rep(1, n), X1 = x_ij)
t_X  = t(X)
id_cluster = rep(1:m, each = n_j)
beta = c(1, 1)

cluster_means <- as.matrix(aggregate(X,
list(id_cluster),
FUN = mean)[, -1])

# Formula to construct intervals -----------------------------------------------
formula_y <-  y ~ 1 + X1 + (1| id_cluster)

# Generate NERM sample in a parametric way-------------------------------------
data_sample <- generate_NERM(generate_u = list(type_dist = "chisquared",
                                               scaling_factor = 1,
                                               dg = 6),
                             generate_e = list(type_dist = "chisquared",
                                              scaling_factor = 1,
                                              dg = 6),
                             beta = beta,
                             X = X,
                             cluster_means,
                             id_cluster = id_cluster,
                             start_seed = 1,
                             no_sim = 1)

# Fit NERM ---------------------------------------------------------------------
fitted_NERM <- fit_NERM(formula_y, data_sample,
                        id_cluster, cluster_means)

# Generate NERM sample in a semiparametric way ---------------------------------
generate_samples <- generate_NERM_sp(empirical_u = fitted_NERM$u_hat,
                                     var_u_est = fitted_NERM$var_u,
                                     empirical_e = fitted_NERM$e_hat,
                                     var_e_est = fitted_NERM$var_e,
                                     beta = fitted_NERM$beta_hat, X = X,
                                     cluster_means,
                                     id_cluster = id_cluster,
                                     start_seed = 1, no_sim = 10)


}
