% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bootstrap_NERM.R
\name{bootstrap_NERM}
\alias{bootstrap_NERM}
\alias{bootstrap_NERM.parametric}
\alias{bootstrap_NERM.semiparametric}
\title{Bootstrapping NERM}
\usage{
bootstrap_NERM(...)

\method{bootstrap_NERM}{parametric}(
  boot_object,
  var_u_est,
  var_e_est,
  beta_est,
  boot_seed = 10,
  n_boot = 100,
  formula_y,
  data_sample,
  id_cluster,
  type_var_estimator,
  cluster_means,
  ...
)

\method{bootstrap_NERM}{semiparametric}(
  boot_object,
  var_u_est,
  var_e_est,
  empirical_u = NULL,
  empirical_e = NULL,
  beta_est,
  boot_seed = 10,
  n_boot = 100,
  formula_y,
  data_sample,
  id_cluster,
  type_var_estimator,
  cluster_means,
  ...
)
}
\arguments{
\item{...}{Additional parameters}

\item{boot_object}{Object defining bootstrap type}

\item{var_u_est}{Estimated variance of random effects}

\item{var_e_est}{Estimated errors of random effects}

\item{beta_est}{Estimated beta parameter}

\item{boot_seed}{Seed to generate bootstrap samples}

\item{n_boot}{Number of bootstrap samples}

\item{formula_y}{Formula to fit NERM}

\item{data_sample}{Data frame}

\item{id_cluster}{Vector with cluster covariate}

\item{type_var_estimator}{Type of variance estimator}

\item{cluster_means}{Cluster-level covariates for fixed parameters}

\item{empirical_u}{Estimated random effects}

\item{empirical_e}{Estimated errors}
}
\value{
List with following parameters
\item{boot_NERMS}{bootstrap NERM samples}
\item{fit_boot_NERMS}{fitted NERM models to bootstrap samples }
\item{double_boot_NERMS}{double bootstrap NERM samples}
\item{fit_double_boot_NERMS}{fitted NERM models to bootstrap samples}
}
\description{
This is a generic function used to generate bootstrap samples
in a parametric or semiparametric way
}
\section{Methods (by class)}{
\itemize{
\item \code{parametric}: Generate bootstrap samples with notmally distribute

\item \code{semiparametric}: Generate population with normally distributed outcomes
}}

\examples{

set.seed(11992)
m = 25
n_j = 5
n = m * n_j
scaling_factor_e = 1
scaling_factor_u = sqrt(0.5)
x_ij = runif(n, 0, 1)
X = cbind(X0 = rep(1, n), X1 = x_ij)
t_X  = t(X)
id_cluster = rep(1:m, each = n_j)
beta = c(1, 1)

cluster_means <- as.matrix(aggregate(X,
list(id_cluster),
FUN = mean)[, -1])

#Formula to construct intervals
formula_y <-  y ~ -1 + X0 + X1 + (1| id_cluster)

data_sample <- generate_NERM(generate_u = list(type = "chisquared",
                                                    scaling_factor = 1,
                                                    dg = 6),
                                  generate_e = list(type = "chisquared",
                                                    scaling_factor = 1,
                                                    dg = 6),
                                  beta = beta,
                                  X = X,
                                  id_cluster = id_cluster,
                                  start_seed = 1,
                                  no_sim = 1,
                                  cluster_means = cluster_means)



fitted_NERM <- fit_NERM(formula_y, data_sample,
                        id_cluster, cluster_means)

type_method = c("parametric")
class(type_method) <- type_method

bootstrap_NERM <- bootstrap_NERM(type_method,
var_u_est = fitted_NERM$var_u,
var_e_est = fitted_NERM$var_e,
beta_est = fitted_NERM$beta_hat,
boot_seed = 2,
n_boot = 100, formula_y,
data_sample = data_sample,
id_cluster = id_cluster,
cluster_means = cluster_means,
type_var_estimator = "var")

type_method = c("semiparametric")
class(type_method) <- type_method

bootstrap_NERM <- bootstrap_NERM(type_method,
var_u_est = fitted_NERM$var_u,
var_e_est = fitted_NERM$var_e,
empirical_u = fitted_NERM$u_hat,
empirical_e = fitted_NERM$e_hat,
beta_est = fitted_NERM$beta_hat,
boot_seed = 2,
n_boot = 100, formula_y,
data_sample = data_sample,
id_cluster = id_cluster,
cluster_means = cluster_means,
type_var_estimator = "var")


}
