% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_NERM.R
\name{generate_NERM}
\alias{generate_NERM}
\title{Generate NERM samples}
\usage{
generate_NERM(
  generate_u = list(type = "chisquared", scaling_factor = 1, dg = 6),
  generate_e = list(type = "chisquared", scaling_factor = 1, dg = 6),
  beta,
  X,
  cluster_means,
  id_cluster,
  start_seed = 1,
  no_sim = 10,
  return_u = FALSE
)
}
\arguments{
\item{generate_u}{List to generate random effects, that is
\itemize{
\item scaling_factor -- scaling factor
\item type -- distribution of random element, \code{chisquare}: chi-squared distribution,
\code{student_t}: Student's t-distribution, \code{normal}: normal distribution
\item dg -- degrees of freedom.
}}

\item{generate_e}{List to generate random effects, that is
\itemize{
\item scaling_factor -- scaling factor
\item type -- distribution of random element, \code{chisquare}: chi-squared distribution,
\code{student_t}: Student's t-distribution, \code{normal}: normal distribution
\item dg -- degrees of freedom.
}}

\item{beta}{Vector with fixed parameters}

\item{X}{Matrix with covariates}

\item{cluster_means}{Cluster-level covariates for fixed parameters}

\item{id_cluster}{Vector with cluster labels}

\item{start_seed}{Starting seed}

\item{no_sim}{Number of samples}

\item{return_u}{Return random effects? Default: return_u = FALSE}
}
\value{
\item{samples}{Data frame or list with data frames with samples from NERM}
}
\description{
Function to generate data samples with outcomes from nested error regression model (NERM)
in a parametric way
}
\examples{

set.seed(11992)
m = 25
n_j = 5
n = m * n_j
scaling_factor_e = 1
scaling_factor_u = sqrt(0.5)
x_ij = runif(n, 0, 1)
X = cbind(X0 = rep(1, n), X1 = x_ij)
t_X  = t(X)
id_cluster = rep(1:m, each = n_j)
beta = c(1, 1)
cluster_means <- as.matrix(aggregate(X,
list(id_cluster),
FUN = mean)[, -1])

generate_samples <- generate_NERM(generate_u = list(type = "chisquared",
                                                    scaling_factor = 1,
                                                    dg = 6),
                                  generate_e = list(type = "chisquared",
                                                    scaling_factor = 1,
                                                    dg = 6),
                                  beta = beta,
                                  X = X,
                                  id_cluster = id_cluster,
                                  start_seed = 1,
                                  no_sim = 10,
                                  cluster_means = cluster_means,
                                  return_u = FALSE)

}
